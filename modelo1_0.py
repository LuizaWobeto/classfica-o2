# -*- coding: utf-8 -*-
"""modelo1.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q93ZcLgW37wIvAVj6oiF6ItY-ZJmf27R
"""

# Adicione no in√≠cio do c√≥digo para baixar dinamicamente
import gdown
gdown.download("https://drive.google.com/file/d/1g4pcqBIb-o0p2hUQGjilktE9RIsEP-L4/view?usp=drive_link", "model (1).tflite", quiet=False)

import streamlit as st
from PIL import Image
import numpy as np
import sys

# --- Verifica√ß√£o de Depend√™ncias ---
try:
    import tflite_runtime.interpreter as tflite
    st.success("‚úÖ TFLite Runtime instalado com sucesso!")
except ImportError:
    st.error("‚ùå TFLite Runtime n√£o instalado. Verifique requirements.txt.")
    st.stop()

# --- Configura√ß√µes do Modelo ---
IMG_SIZE = (150, 150)  # Atualize conforme seu modelo
class_names = ['adenocarcinoma de c√≥lon', 'adenocarcinoma de pulm√£o', 'adenocarcinoma escamoso', 'c√©lulas normais']

# --- Carregar Modelo TFLite ---
interpreter = tflite.Interpreter(model_path="modelo.tflite")
interpreter.allocate_tensors()

# Obter detalhes de input/output
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# --- Interface Streamlit ---
st.title("Classificador de C√¢ncer de Pulm√£o e C√≥lon ü´Åüß¨")
st.write("""
    Este aplicativo classifica imagens de tecidos em diferentes tipos de c√¢ncer ou tecido normal.
    Fa√ßa upload de uma imagem para ver a predi√ß√£o do modelo.
""")

# Upload de imagem
uploaded_file = st.file_uploader("/content/lungaca98.jpeg", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert('RGB')
    st.image(image, caption='Imagem enviada', use_column_width=True)

    # Pr√©-processamento
    img_array = np.array(image.resize(IMG_SIZE)) / 255.0
    img_array = np.expand_dims(img_array, axis=0).astype(np.float32)  # TFLite requer float32

    # Predi√ß√£o com TFLite
    interpreter.set_tensor(input_details[0]['index'], img_array)
    interpreter.invoke()
    prediction = interpreter.get_tensor(output_details[0]['index'])

    predicted_class = class_names[np.argmax(prediction)]
    confidence = np.max(prediction) * 100

    st.subheader('Resultado:')
    st.success(f'Predi√ß√£o: {predicted_class} (Confian√ßa: {confidence:.2f}%)')